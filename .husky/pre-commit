#!/bin/sh
set -eu  # Exit on error, treat unset variables as error

# Go backend checks
echo "🔍 Running backend pre-commit checks..."

# Check if any Go files are being committed (including renames, excluding generated/vendor)
GO_FILES=$(git diff --cached --name-only --diff-filter=ACMR | \
  grep '\.go$' | \
  grep -v '^vendor/' | \
  grep -v '^third_party/' | \
  grep -v '_gen\.go$' | \
  grep -v '/generated/' | \
  grep -v '\.pb\.go$' || true)

if [ -n "$GO_FILES" ]; then
  echo "📝 Go files detected in commit, running golangci-lint..."
  
  # Check if golangci-lint is available
  if ! command -v golangci-lint >/dev/null 2>&1; then
    echo "❌ golangci-lint is not installed or not in PATH"
    echo "💡 Install it with: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b \$(go env GOPATH)/bin v1.61.0"
    exit 1
  fi
  
  # Check Go code formatting
  echo "   Checking Go code formatting..."
  UNFORMATTED=$(echo "$GO_FILES" | xargs gofmt -l)
  
  if [ -n "$UNFORMATTED" ]; then
    echo "❌ The following Go files need formatting:"
    echo "$UNFORMATTED" | sed 's/^/     /'
    echo "💡 Run 'gofmt -w .' to format all files, then re-stage and commit"
    echo "⚠️  Note: --no-verify bypasses are not accepted in this project"
    exit 1
  fi
  echo "✅ All Go files are properly formatted"
  
  # Run golangci-lint
  echo "   Linting Go files..."
  if ! golangci-lint run -v; then
    echo "❌ golangci-lint found issues in Go files"
    echo "💡 Fix the issues above before committing"
    echo "⚠️  Note: --no-verify bypasses are not accepted in this project"
    exit 1
  fi
  echo "✅ golangci-lint passed for all Go files"
else
  echo "📄 No Go files in this commit, skipping golangci-lint"
fi

# Frontend checks
echo "🔍 Running frontend pre-commit checks..."
cd frontend || exit 1

# Run lint-staged for staged files first (faster feedback)
echo "🧹 Running lint-staged..."
npx lint-staged || exit 1

# Run TypeScript/Svelte type checking on staged files only
echo "📝 Type checking staged files..."
# Get staged .ts, .svelte files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|svelte)$' | head -20)

if [ -n "$STAGED_FILES" ]; then
  echo "Checking types for staged files..."
  npm run typecheck || {
    echo "❌ TypeScript errors found in staged files."
    echo "💡 Fix errors before committing"
    echo "⚠️  Note: --no-verify bypasses are not accepted in this project"
    exit 1
  }
else
  echo "ℹ️ No TypeScript/Svelte files staged, skipping typecheck"
fi

echo "✅ All pre-commit checks passed!"
